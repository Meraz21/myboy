{"version":3,"sources":["logo.svg","constants/action_types.js","reducers/index.js","store/index.js","Buttons/Fancy.js","actions/index.js","ClickList.js","Input/EntryField.js","Input/EntryDisplay.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ADD_CLICK","REMOVE_CLICK","initialState","clicks","rootReducer","state","arguments","length","undefined","type","Object","assign","concat","slice","store","createStore","FancyConnected","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","currClass","addClick","setState","_this2","react_default","a","createElement","className","onClick","clickFancy","Component","Fancy","connect","dispatch","click","payload","createContext","displayName","ClickListConnected","filteredClicks","allClicks","filter","r","f","numFilter","Number","i","push","dis","filtered","innerElementType","forwardRef","_ref","ref","children","rest","objectWithoutProperties","_ref2","map","index","key","style","top","left","width","height","bind","assertThisInitialized","handleChange","toggleGrow","doGrow","e","target","value","next","filteredOut","res","val","CSSTransition","timeout","classNames","opt","selected","full","Fragment","name","removeClick","Buttons_Fancy","fontSize","onChange","_ref3","data","clickList","color","TransitionGroup","growTest","ClickList","EntryFieldConnected","textChanged","EntryField","EntryDisplayConnected","Input_EntryField","entryComplete","EntryDisplay","App","Input_EntryDisplay","src_ClickList","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.23d002de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ADD_CLICK = \"ADD_CLICK\";\r\nexport const REMOVE_CLICK = \"REMOVE_CLICK\";","import { ADD_CLICK, REMOVE_CLICK } from \"../constants/action_types\";\r\n\r\nconst initialState = {\r\n    clicks: []\r\n  };\r\n  /**\r\n * Applies the given action to the provided state.\r\n *\r\n * @param state A function that returns the next state tree, given the\r\n *   current state tree and the action to handle.\r\n *\r\n * @param [action] The action to be applied to the state parameter.\r\n * \r\n * @returns The state of the application after the action has been applied.\r\n */\r\n  function rootReducer(state = initialState, action) {\r\n      switch(action.type){\r\n        case ADD_CLICK:\r\n          return Object.assign({}, state, {\r\n            clicks: state.clicks.concat(state.clicks.length + 1)\r\n          });\r\n        case REMOVE_CLICK:          \r\n          return Object.assign({}, state, {\r\n            clicks: state.clicks.slice(0, state.clicks.length-1)\r\n          });\r\n        default:\r\n          return state;\r\n      }\r\n  };\r\n  export default rootReducer;","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/index\";\r\nconst store = createStore(rootReducer);\r\nexport default store;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport {addClick} from \"../actions/index\";\r\n\r\nclass FancyConnected extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            currClass: \"Clicked\"\r\n        };\r\n    }\r\n    clickFancy() {\r\n        this.props.addClick(1);\r\n        this.setState({currClass: \"ClickedAgain\"});\r\n    }\r\n  render() {\r\n    return (\r\n      <div className=\"FancyButton\">\r\n            <div className={this.state.currClass} onClick={()=>this.clickFancy()}>\r\n                {this.state.currClass === \"Clicked\" ? \"Click\": `Clicked (${this.props.clicks.length})`}\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return { clicks: state.clicks };\r\n  };\r\nfunction mapDispatchToProps(dispatch) {\r\n    return { addClick: click => dispatch(addClick(click)) };\r\n  };\r\n  const Fancy = connect(mapStateToProps, mapDispatchToProps)(FancyConnected);\r\nexport default Fancy;","import { ADD_CLICK, REMOVE_CLICK } from \"../constants/action_types\";\r\n\r\nexport function addClick(payload) {\r\n    return { type: ADD_CLICK, payload }\r\n  };\r\n  export function removeClick() {\r\n    return { type: REMOVE_CLICK }\r\n  };","import React, { Component, forwardRef, createContext } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { FixedSizeList as List } from 'react-window';\r\nimport Fancy from './Buttons/Fancy';\r\nimport memoize from 'memoize-one';\r\nimport { removeClick } from './actions';\r\nimport {\r\n  CSSTransition,\r\n  TransitionGroup,\r\n} from 'react-transition-group';\r\nimport './App.css';\r\nconst StickyListContext = createContext();\r\nStickyListContext.displayName = \"StickyListContext\";\r\n\r\nclass ClickListConnected extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.filteredClicks = this.filteredClicks.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.toggleGrow = this.toggleGrow.bind(this);\r\n\r\n    this.state = {\r\n      filter : '',\r\n      doGrow: false\r\n    }\r\n  }\r\n  filteredClicks = (allClicks, filter) => {\r\n    let r = [];\r\n    let f = [];\r\n    let numFilter = Number(filter);\r\n    for(let i = 0; i < allClicks.length; i++){\r\n      if(filter.length > 0 && allClicks[i] == numFilter){\r\n        f.push(allClicks[i]);\r\n      }\r\n      else{\r\n        r.push(allClicks[i]);\r\n      }\r\n    }\r\n    return {dis:r, filtered:f};\r\n  };\r\n  \r\ninnerElementType = forwardRef(({ children, ...rest }, ref) => (\r\n    ({ filtered }) => (\r\n      <div ref={ref} {...rest}>\r\n        {filtered.map(index => (\r\n          <span\r\n            index={index}\r\n            key={index}\r\n            style={{ top: index * 35, left: 0, width: \"100%\", height: 35 }}\r\n          >Test</span>\r\n        ))}\r\n\r\n        {children}\r\n      </div>\r\n    )\r\n));\r\n\r\n  handleChange(e){\r\n    this.setState({filter: e.target.value});\r\n  }\r\n  toggleGrow(){\r\n    const curr = this.state.doGrow;\r\n    let next = false;\r\n    if(!curr){\r\n      next = true;\r\n    }\r\n    this.setState({doGrow: next});\r\n  }\r\n  render() {\r\n    const clickList = ({data, style, index}) => {\r\n      return (       \r\n          <div style={style}>\r\n            Click {data[index]} selected\r\n          </div>\r\n      );\r\n    }\r\n    const filteredList = (filteredOut) => {\r\n      let r = filteredOut.map((val, i) => {\r\n        return clickList({data: filteredOut, style: {color: 'red'}, index: i});\r\n      });\r\n      return (r);\r\n    }\r\n    const growTest = (doGrow) => {\r\n      const res = (\r\n        <CSSTransition\r\n          key={\"0_test_1\"}\r\n          timeout={250}\r\n          classNames=\"grow\"\r\n        ><div>\r\n          <div className=\"row\">\r\n        <div>test1</div>\r\n        <div>test2</div>\r\n        <div>test3</div>\r\n        <div>test4</div>\r\n        <div>test5</div>\r\n        <div>test6</div>\r\n        <div>test7</div>\r\n        <div>test8</div>\r\n        <div>test9</div>\r\n        <div>test10</div>\r\n        <div>test11</div>\r\n        <div>test12</div>\r\n        <div>test13</div>\r\n        <div>test14</div>\r\n        <div>test15</div>\r\n        <div>test16</div>\r\n      </div>\r\n      <div className=\"row\">        \r\n        <div>test17</div>\r\n        <div>test18</div>\r\n        <div>test19</div>\r\n        <div>test20</div>\r\n        <div>test21</div>\r\n        <div>test22</div>\r\n        <div>test23</div>\r\n        <div>test24</div>\r\n        <div>test25</div>\r\n        <div>test26</div>\r\n        <div>test27</div>\r\n        <div>test28</div>\r\n        <div>test29</div>\r\n        <div>test30</div>\r\n        <div>test31</div>\r\n        <div>test32</div>\r\n      </div></div></CSSTransition>);\r\n      if(doGrow){\r\n        return res;\r\n      }\r\n      return (<></>);\r\n    }\r\n    let res = this.filteredClicks(this.props.clicks, this.state.filter);\r\n    const clicks = res.dis.map((val, i) => {\r\n      return ( \r\n        <CSSTransition\r\n          key={i}\r\n          timeout={500}\r\n          classNames=\"item\"\r\n        >\r\n          <div key={i} >\r\n            Click {val}  \r\n          </div>\r\n        </CSSTransition>)\r\n    })\r\n    const opt = this.props.clicks.map((val) => {\r\n      let res =  (<option value={val}>Click {val}</option>);\r\n      if(val == this.state.filter){\r\n        res =  (<option value={val} selected={true}>Click {val}</option>);\r\n      }\r\n      return res;\r\n    });\r\n    let full = (<></>);\r\n    if (clicks.length > 0){\r\n      full = (<button name='removeClick' onClick={() => this.props.removeClick()}>Remove Click</button>);\r\n    }\r\n    return (\r\n      <>\r\n      <Fancy></Fancy>\r\n      <div>\r\n        <label style={{fontSize: '18pt'}}>Select Click #</label>\r\n        <select name='clickSelector' onChange={(e)=>this.handleChange(e)}>\r\n          <option value=''>-None-</option>\r\n          {opt}\r\n        </select>\r\n      </div>\r\n      <div>\r\n        {filteredList(res.filtered)}\r\n      </div>\r\n      {/* <List\r\n        height={75}\r\n        itemData={res.dis}\r\n        itemCount={res.dis.length}\r\n        itemSize={35}\r\n        width={300}\r\n      >\r\n      {clickList}\r\n      </List> */}\r\n        {full}\r\n        <TransitionGroup>\r\n          {clicks}\r\n        </TransitionGroup>\r\n      <br />\r\n      <h1><u>Component 3</u></h1>\r\n      <button name='reportToggle' onClick={()=>this.toggleGrow()}>Toggle Report Data</button>\r\n      <div className=\"container\">\r\n        <TransitionGroup>\r\n        {growTest(this.state.doGrow)}\r\n        </TransitionGroup>\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return { clicks: state.clicks };\r\n  };\r\n  function mapDispatchToProps(dispatch) {\r\n    return { removeClick: click => dispatch(removeClick()) };\r\n  };\r\nconst ClickList = connect(mapStateToProps, mapDispatchToProps)(ClickListConnected);\r\nexport default ClickList;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\n\r\nclass EntryFieldConnected extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: this.props.value\r\n        };\r\n\r\n        this.clickFancy = this.clickFancy.bind(this);\r\n        this.textChanged = this.textChanged.bind(this);\r\n    }\r\n    clickFancy() {\r\n        this.props.onClick(this.state.value);\r\n    }\r\n    textChanged(e){\r\n        this.setState({value:e.target.value});\r\n    }\r\n  render() {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" onChange={this.textChanged} value={this.state.value}>\r\n            </input>\r\n            <button onClick={this.clickFancy}>Set Title</button>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n  const EntryField = connect(null, null)(EntryFieldConnected);\r\nexport default EntryField;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport EntryField from \"./EntryField\";\r\n\r\nclass EntryDisplayConnected extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            value: \"initial value\"\r\n        };\r\n    }\r\n    entryComplete(value){\r\n        this.setState({value: value});\r\n    }\r\n  render() {\r\n    return (\r\n        <div>\r\n            <span><u>Title</u>: {this.state.value}</span>\r\n            <EntryField value={this.state.value} onClick={(val) => this.entryComplete(val)}></EntryField>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n  const EntryDisplay = connect(null, null)(EntryDisplayConnected);\r\nexport default EntryDisplay;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Fancy from './Buttons/Fancy'\nimport ClickList from './ClickList';\nimport EntryDisplay from './Input/EntryDisplay';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1><u>Component 1</u></h1>\n          <EntryDisplay></EntryDisplay>\n          <br />\n          <h1><u>Component 2</u></h1>\n          <ClickList></ClickList>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from \"react-redux\";\nimport store from \"./store/index\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<Provider store={store}>\n<App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}